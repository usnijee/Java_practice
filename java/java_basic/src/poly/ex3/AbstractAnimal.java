package poly.ex3;
/*
    ex1과 ex2의 코드에서 다형적 참조와 오버라이딩을 통해 서로 다른 타입의 객체를 같은 타입으로 묶에 처리 할 수 있었다.
    이때 2가지의 고려사항이 존재한다.
    1. 부모 클래스인 Animal 클래스의 생성 여부
    2. 부모 클래스인 Animal 클래스의 자식 클래스에서 오버라이딩을 하지 않을 가능성

    1번 --> 다형적 참조를 위해서 부모 클래스의 존재는 반드시 필요하나 Animal 클래스 자체를 사용할 일이 있을까? Animal 클래스는 오직 다형성을
    위해서 필요한 것...

    2번 --> 실수로 자식 클래스에서 오버라이딩을 하지 않는다면? 문제는 이 상태서 코드를 실행해도 오류가 발생하지 않는다는 사실이다. (부모 클래스에 메서드가 존재하기에)

    이를 방지하기 위해 '추상 클래스'가 존재한다.
 */
public abstract class AbstractAnimal {  // 추상 클래스는 abstract 키워드를 붙여주면 됨
    /*
     추상 클래스
     1. 추상 클래스는 직접 인스턴스 생성이 불가능하다
     2. 추상 클래스내에서 추상 메서드를 제외하면 일반 클래스와 동일하게 사용 가능
     */

    public abstract void sound();
    /*
     추상 메서드
     1. body가 없는 불안정한 메서드
     2. 오직 자식 클래스의 오버라이딩을 위한 메서드 --> 자식 클래스는 추상 메서드를 반드시 오버라이딩 해야함 안하면 컴파일 에러 발생
     3. abstract 키워드를 붙이면 된다
     */

    public void move() {
        System.out.println("동물이 움직입니다.");
    }
}
